# -*- coding: utf-8 -*-
"""Recommendation Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15odMztbW_kfmMLPU7lfNGVB-h7KLvn_j
"""

import pandas as pd
import numpy as np

df = pd.read_csv("GrubHub Data.csv")
df

df.isnull().sum()

df.duplicated()

df.head()

df.info()

df.head(1)

df['Dish_Price'] = df['Dish_Price'].str.replace('[\$\s+]', '', regex=True).astype(float)

df

df.columns

df['Ratings'] = df['Ratings'].str.replace('[ratings]', '', regex=True).astype(float)

df

df.info()

df['Ratings'] = df['Ratings'].astype(int)

df

num_col = df.select_dtypes(include=['float','int']).columns

cat_col = df.select_dtypes(include=['object']).columns

for i in cat_col:
    unique_val = df[i].unique()
    print(i ,':' , unique_val,'\n')

df.shape

"""#ML Model Block"""

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
for i in cat_col:
    df[i] = label_encoder.fit_transform(df[i])

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

df[num_col] = sc.fit_transform(df[num_col])

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, mean_squared_error
from sklearn.metrics import r2_score

df.columns

drop_columns = ['Restaurant_Link']
df.drop(columns=drop_columns, inplace=True)

df.head(1)

label_encoder = LabelEncoder()
df['Dish_Price'] = label_encoder.fit_transform(df['Dish_Price'])

X = df.drop('Dish_Price', axis=1)
y = df['Dish_Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""#Linear Regression"""

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

lr_predictions = lr_model.predict(X_test)
lr_mse = mean_squared_error(y_test, lr_predictions)

lr_predictions

lr_mse

r2 = r2_score(y_test, lr_predictions)

r2

"""#Logistic Regression Model"""

logistic_model = LogisticRegression()
logistic_model.fit(X_train, y_train)

logistic_predictions = logistic_model.predict(X_test)

logistic_mse = mean_squared_error(y_test, logistic_predictions)

logistic_mse

r2 = r2_score(y_test, logistic_predictions)

r2

class_report = classification_report(y_test, logistic_predictions)
print(class_report)

"""# Random Forest Classifier Model"""

random_model = RandomForestClassifier(random_state=42)
random_model.fit(X_train, y_train)

r_pred = random_model.predict(X_test)

r_accuracy = accuracy_score(y_test,r_pred)
r_repo = classification_report(y_test, r_pred)

r_accuracy

r2 = r2_score(y_test, r_pred)

r2

print(r_repo)

"""# Descision Tree Classifier Model"""

tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, y_train)

d_predictions =tree_model.predict(X_test)

tree_accuracy =accuracy_score(y_test,d_predictions)
tree_report = classification_report(y_test,d_predictions)

tree_accuracy

r2 = r2_score(y_test, d_predictions)

r2

print(tree_report)

from sklearn.svm import SVR

svr_model = SVR(kernel='linear')
svr_model.fit(X_train, y_train)

svr_predictions = svr_model.predict(X_test)

svr_predictions

mse = mean_squared_error(y_test, svr_predictions)
r2 = r2_score(y_test, svr_predictions)

mse

r2

df.head(1)

df.columns

top_cuisine = df['Cuisine'].mode()[0]

print(top_cuisine)

df.to_csv('grubhub_data.csv', index=False)

df['Dish_Name']

df

